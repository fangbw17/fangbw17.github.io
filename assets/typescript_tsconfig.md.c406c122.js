import{_ as s,o as a,c as n,M as o}from"./chunks/framework.61c7cfea.js";const C=JSON.parse('{"title":"tsconfig","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/tsconfig.md","filePath":"typescript/tsconfig.md"}'),l={name:"typescript/tsconfig.md"},p=o(`<h1 id="tsconfig" tabindex="-1">tsconfig <a class="header-anchor" href="#tsconfig" aria-label="Permalink to &quot;tsconfig&quot;">​</a></h1><p><code>tsconfig.json</code> 是 TypeScript 的配置文件，一般放在项目的根目录。如果项目是 JavaScript，但想用 TypeScript 处理，那么配置文件的名字是 <code>jsconfig.json</code>，跟 <code>tsconfig</code> 的写法是一样的。 <code>tsconfig.json</code> 主要供 <code>tsc</code> 编译器使用，可以使用 命令行参数 <code>-- project</code> 或 <code>-p</code> 来指定 <code>tsconfig.json</code> 的位置。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./xxx/xxx.json</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或 指定目录</span></span>
<span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./xxx</span></span></code></pre></div><p>若没有指定配置文件的位置，则会在当前目录下搜索 <code>tsconfig.json</code> 文件，不存在，则向上搜索，直到找到为止。 配置文件可以不必手写，使用 tsc 命令的 <code>--init</code> 参数自动生成</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--init</span></span></code></pre></div><p><code>tsc -- init</code> 会生成一些默认配置。 也可以使用一些配置好的文件，npm 的 <code>@tsconfig</code> 名称空间下面有很多模块，都是写好的配置文件，比如 <code>@tsconfig/recommended</code> 和 <code>@tsconfig/node16</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@tsconfig/node16</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@tsconfig/node16</span></span></code></pre></div><p>安装完成以后，可以在 <code>tsconfig.json</code> 里面引用，相当于继承了设置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@tsconfig/node16/tsconfig.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>tsconfig.json</code> 一级属性并不多，大部分都是在 <code>compilerOptions</code> 属性的二级属性。</p><h2 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h2><p><code>exclude</code> 是一个数组，必须与 <code>include</code> 属性一起使用，用来从编译列表中去除指定的文件，支持通配符。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/utils/xx.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><p><code>extends</code> 一般用来继承另一个配置文件。如果项目有多个配置，可以把共同的配置写成 <code>tsconfig.base.json</code>，其他的配置文件继承该文件。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../tsconfig.base.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果指定的路径不是以 <code>./</code> 或 <code>../</code> 开头，那么将在 <code>node_modules</code> 目录下查找指定的配置文件。 编译器会先加载 <code>extends</code> 指定的 <code>tsconfig.json</code>，然后加载当前的 <code>tsconfig.json</code>。如果有重名的属性，后者会覆盖前者。</p><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h2><p><code>files</code> 指定编译的文件列表，如果其中有一个文件不存在，就会报错。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>files</code> 是一个数组，排在前面的文件先编译，即从左到右编译。该属性必须逐一列出文件，不支持文件匹配。 文件较多时，使用 <code>include</code> 和 <code>exclude</code> 属性比较合适。</p><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h2><p>include 属性指定编译的文件列表，即支持文件名，也支持通配符。</p><ul><li><code>?</code>: 指代单个字符</li><li><code>*</code>: 指代任意字符，</li><li><code>**</code>: 指定任意目录层级</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tests/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果不指定文件后缀名，默认是 <code>.ts</code>、<code>.tsx</code> 和 <code>.d.ts</code> 文件。若开启了 <code>allowJs</code>，那么还包括 <code>.js</code> 和 <code>.jsx</code></p><h2 id="references" tabindex="-1">references <a class="header-anchor" href="#references" aria-label="Permalink to &quot;references&quot;">​</a></h2><p><code>references</code> 是一个数组。主要用于将大型项目拆分成更小的部分构建，这样做，可以缩短构建时间，强制组件之间的逻辑分离，并以新的更好的方式组织代码。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">references</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pkg1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pkg2/tsconfig.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>引用底层项目的 <code>tsconfig.json</code> 必须启用 <code>composite</code> 属性。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">composite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h2><p>设置编译的行为，不设置的情况 TypeScript 有默认的设置。 主要分为下面几类</p><ul><li>类型检查（Type Checking）</li><li>模块（Modules）</li><li>发射（Emit）</li><li>JavaScript 支持（JavaScript Support）</li><li>编辑支持（Editor Support）</li><li>操作约束（Interop Constraints）</li><li>向后兼容（Backwards Compatibility）</li><li>语言与环境（Language and Environment）</li><li>编译器诊断（Compiler Diagnostics）</li><li>项目（Projects）</li><li>输出格式（Output Formatting）</li><li>完整性（Completeness）</li><li>命令行（Command line）</li><li>观察选项（Watch Options）</li></ul><h3 id="类型检查-type-checking" tabindex="-1">类型检查（Type Checking） <a class="header-anchor" href="#类型检查-type-checking" aria-label="Permalink to &quot;类型检查（Type Checking）&quot;">​</a></h3><h4 id="allowunreachablecode" tabindex="-1">allowUnreachableCode <a class="header-anchor" href="#allowunreachablecode" aria-label="Permalink to &quot;allowUnreachableCode&quot;">​</a></h4><p>是否允许存在不可能会执行的代码。有三种值：</p><ul><li>undefined：默认值，编辑器警告</li><li>true：忽略不会执行的代码</li><li>false：报错</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不会影响由于类型分析而无法访问的代码错误</p></div><h4 id="allowunusedlabels" tabindex="-1">allowUnusedLabels <a class="header-anchor" href="#allowunusedlabels" aria-label="Permalink to &quot;allowUnusedLabels&quot;">​</a></h4><p>是否允许未使用的代码标签。有三种值：</p><ul><li>undefined：默认值，编辑器警告</li><li>true：忽略</li><li>false：报错</li></ul><h4 id="alwaysstrict" tabindex="-1">alwaysStrict <a class="header-anchor" href="#alwaysstrict" aria-label="Permalink to &quot;alwaysStrict&quot;">​</a></h4><p><code>alwaysStrict</code> 执行 ECMAScript 严格模式（&quot;use strict&quot;）</p><h4 id="exactoptionalpropertytypes" tabindex="-1">exactOptionalPropertyTypes <a class="header-anchor" href="#exactoptionalpropertytypes" aria-label="Permalink to &quot;exactOptionalPropertyTypes&quot;">​</a></h4><p>可选属性不能赋值为 <code>undefined</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 开启 exactOptionalPropertyTypes</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserDefaults</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colorThemeOverride</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dark</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">light</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> userDefaults</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserDefaults</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">colorThemeOverride</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dark</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#A6ACCD;">userDefaults</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">colorThemeOverride </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span></code></pre></div><p>开启 <code>exactOptionalPropertyTypes</code>，哪怕 <code>colorThemeOverride</code> 属性是可选的，也不能显式的赋值为 <code>undefined</code></p><h4 id="nofallthroughcasesinswitch" tabindex="-1">noFallthroughCasesInSwitch <a class="header-anchor" href="#nofallthroughcasesinswitch" aria-label="Permalink to &quot;noFallthroughCasesInSwitch&quot;">​</a></h4><p>在 <code>swith</code> 条件语句中 对没有 <code>break/return/throw</code> 的 case 语句报错。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 开启 noFallthroughCasesInSwitch</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (a) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">even</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">odd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="noimplicitany" tabindex="-1">noImplicitAny <a class="header-anchor" href="#noimplicitany" aria-label="Permalink to &quot;noImplicitAny&quot;">​</a></h4><p>是否允许 any 类型存在。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="noimplicitoverride" tabindex="-1">noImplicitOverride <a class="header-anchor" href="#noimplicitoverride" aria-label="Permalink to &quot;noImplicitOverride&quot;">​</a></h4><p>是否禁止隐式重写父类（基类）的成员。 当子类继承父类时，若隐式的重写某个成员，在调用的时候可能会导致一些意外的行为。开启了 <code>noImplicitOverride</code> 则会要求显示的使用 <code>override</code> 关键字来重写父类的成员，增加代码的可读性和可维护性，并减少潜在的错误。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 报错，缺少 override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="noimplicitreturns" tabindex="-1">noImplicitReturns <a class="header-anchor" href="#noimplicitreturns" aria-label="Permalink to &quot;noImplicitReturns&quot;">​</a></h4><p>是否需要确保所有情况下都必须有一个返回值</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 启用 noImplicitReturns</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lookup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">black</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">beats</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 报错，else 分支没有 return</span></span>
<span class="line"><span style="color:#F07178;">        (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bose</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="noimplicitthis" tabindex="-1">noImplicitThis <a class="header-anchor" href="#noimplicitthis" aria-label="Permalink to &quot;noImplicitThis&quot;">​</a></h4><p>开启后，如果 this 隐私的显示为 any 类型，那么就会报错</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rectangle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">height</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">getAreaFunction</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>this 的上下文位于 getAreaFunction，而不是 Rectangle</p><h4 id="nopropertyaccessfromindexsignature" tabindex="-1">noPropertyAccessFromIndexSignature <a class="header-anchor" href="#nopropertyaccessfromindexsignature" aria-label="Permalink to &quot;noPropertyAccessFromIndexSignature&quot;">​</a></h4><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Game</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getGame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Game</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>上面示例中，getGame 函数会返回一个值，接口 Game 中定义了一个 name 属性，和一个字符串索引。 所以 <code>g.text</code> 在编译阶段是成立的，但是在运行时，是不能确定 <code>g</code> 中是否存在属性 <code>text</code>。同时 TypeScript 会进行返回值的类型推断，倘若没有属性 <code>text</code>，那么会返回 <code>undefined</code>，可能就会造成潜在的风险。 为了避免这种情况，TypeScript 提供了 <code>noPropertyAccessFromIndexSignature</code>。 设置为 <code>true</code> 时，会抛出错误，必须通过 <code>[]</code> 来访问索引签名定义的属性，提供使用者该属性不一定存在。</p><h4 id="nouncheckedindexedaccess" tabindex="-1">noUncheckedIndexedAccess <a class="header-anchor" href="#nouncheckedindexedaccess" aria-label="Permalink to &quot;noUncheckedIndexedAccess&quot;">​</a></h4><p>是否在访问索引属性时自动添加上 <code>undefined</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number | undfined</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number | undfined</span></span></code></pre></div><h4 id="nounusedlocals" tabindex="-1">noUnusedLocals <a class="header-anchor" href="#nounusedlocals" aria-label="Permalink to &quot;noUnusedLocals&quot;">​</a></h4><p>未使用的局部变量警告</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> createKeyboard </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 警告</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="nounusedparameters" tabindex="-1">noUnusedParameters <a class="header-anchor" href="#nounusedparameters" aria-label="Permalink to &quot;noUnusedParameters&quot;">​</a></h4><p>函数参数未使用警告</p><h4 id="strict" tabindex="-1">strict <a class="header-anchor" href="#strict" aria-label="Permalink to &quot;strict&quot;">​</a></h4><p>用来开启 TypeScript 的严格检查，默认是关闭的。 开启该选项，意味着一同开启了以下设置</p><ul><li>alwaysStrict</li><li>strictNullChecks</li><li>strictBindCallApply</li><li>strictFunctionTypes</li><li>strictPropertyInitialization</li><li>noImplicitAny</li><li>noImplicitThis</li><li>useUnknownInCatchVariables</li></ul><p>上述中的某一行也可以单独设置开启关闭。</p><h4 id="strictbindcallapply" tabindex="-1">strictBindCallApply <a class="header-anchor" href="#strictbindcallapply" aria-label="Permalink to &quot;strictBindCallApply&quot;">​</a></h4><p>是否对函数 call、bind 和 apply 等内置方法的参数类型检查</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">parseInt</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> n1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开启状态下报错，类型不对。未开启状态下类型是 any</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> n2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="strictfunctiontypes" tabindex="-1">strictFunctionTypes <a class="header-anchor" href="#strictfunctiontypes" aria-label="Permalink to &quot;strictFunctionTypes&quot;">​</a></h4><p>是否开启严格的函数检查。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fna</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开启则报错，入参类型不一样。不开启忽略</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> func</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="strictnullchecks" tabindex="-1">strictNullChecks <a class="header-anchor" href="#strictnullchecks" aria-label="Permalink to &quot;strictNullChecks&quot;">​</a></h4><p>是否开启空值检查。</p><h4 id="strictpropertyinitialization" tabindex="-1">strictPropertyInitialization <a class="header-anchor" href="#strictpropertyinitialization" aria-label="Permalink to &quot;strictPropertyInitialization&quot;">​</a></h4><p>检查<strong>类中声明的属性是否在构造函数中赋值</strong>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 属性“name”没有初始化表达式，且未在构造函数中明确赋值。</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="useunknownincatchvariables" tabindex="-1">useUnknownInCatchVariables <a class="header-anchor" href="#useunknownincatchvariables" aria-label="Permalink to &quot;useUnknownInCatchVariables&quot;">​</a></h4><p>允许在 <code>catch</code> 子句中奖变量类型从 any 更改为 unknown。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (e) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 通过 instanceof 确定 e 的具体类型</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h3><h4 id="allowarbitraryextensions" tabindex="-1">allowArbitraryExtensions <a class="header-anchor" href="#allowarbitraryextensions" aria-label="Permalink to &quot;allowArbitraryExtensions&quot;">​</a></h4><p>在项目中 JavaScript 和 TypeScript 文件扩展名一般是 <code>.js|.ts|.tsx|.jsx</code> 等，如果导入的文件不是这种后缀名，那么将会以 <code>{file.basename}.d.{extension}</code> 的形式查找该路径的声明文件。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">cookie-banner</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">cookieBanner</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> css</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./app.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">styles</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cookieBanner</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="allowimportingtsextensions" tabindex="-1">allowImportingTsExtensions <a class="header-anchor" href="#allowimportingtsextensions" aria-label="Permalink to &quot;allowImportingTsExtensions&quot;">​</a></h4><p>允许导入 TypeScript 的扩展文件：<code>.ts|.mts|.tsx</code>。只有当 <code>--noEmit</code> 或 <code>--emitDeclarationOnly</code> 开启时才有效，因为文件导入路径还需要被构建工具进行处理后才能正常使用。</p><h4 id="allowumdglobalaccess" tabindex="-1">allowUmdGlobalAccess <a class="header-anchor" href="#allowumdglobalaccess" aria-label="Permalink to &quot;allowUmdGlobalAccess&quot;">​</a></h4><p>允许从内部模块文件访问作为全局变量的 <em>UMD</em> 导出。</p><h4 id="baseurl" tabindex="-1">baseUrl <a class="header-anchor" href="#baseurl" aria-label="Permalink to &quot;baseUrl&quot;">​</a></h4><p>设置 TypeScript 项目的基准目录。由于默认是以 tsconfig.json 的位置作为基准目录，所以一般不需要使用该属性。</p><h4 id="customconditions" tabindex="-1">customConditions <a class="header-anchor" href="#customconditions" aria-label="Permalink to &quot;customConditions&quot;">​</a></h4><p>可以设置一些附加条件，当 TypeScript 从 <code>package.json</code> 的 <code>exports</code> 或 <code>imports</code> 字段解析时，这些条件将添加到解析器默认使用的现有条件中。</p><h4 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h4><p>指定编译产物的模块格式。默认值与 <code>target</code> 属性有关。如果 <code>target</code> 是 <code>ES6</code> 以下，则默认值是 <code>commonjs</code>，否则是 <code>ES6/ES2015</code></p><h4 id="moduleresolution" tabindex="-1">moduleResolution <a class="header-anchor" href="#moduleresolution" aria-label="Permalink to &quot;moduleResolution&quot;">​</a></h4><p>指定模块解析策略，即如何查找模块，有四种值。</p><ul><li>node：采用 Node.js 的 CommonJS 语法</li><li>node16|nodenext：采用 Node.js 的 ECMAScript 语法</li><li>classic：TypeScript 1.6 之前的语法，新项目不建议使用。</li><li>bundler：TypeScript 5.0 新增的选项，表示当前代码被其他打包器处理（Webpack、Vite、esbuild、Parcel、rollup、swc），要求 <code>module</code> 设为 <code>es2015</code> 及以上版本。 <code>moduleResolution</code> 的默认值与 <code>module</code> 属性有关，如果 <code>module</code> 为 <code>AMD</code>、<code>UMD</code>、<code>System</code> 或 <code>ES6/ES2015</code>，默认值为 <code>classic</code>。如果是 <code>node16</code> 或 <code>nodenext</code>，默认值为这两个。其他情况下，默认值为 <code>Node</code></li></ul><h4 id="modulesuffixes" tabindex="-1">moduleSuffixes <a class="header-anchor" href="#modulesuffixes" aria-label="Permalink to &quot;moduleSuffixes&quot;">​</a></h4><p>提供一种方法覆盖解析模块时要搜索的文件名后缀列表</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">moduleSuffixes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.ios</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.native</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>TypeScript 将查找相关文件 <code>./foo.ios.ts</code>、<code>./foo.native.ts</code>，最后是<code>./foo.ts</code></p><h4 id="noresolve" tabindex="-1">noResolve <a class="header-anchor" href="#noresolve" aria-label="Permalink to &quot;noResolve&quot;">​</a></h4><p>开启的情况下忽略三斜杠引用（///）；既不会导致添加新文件，也不会更改所提供文件的顺序。</p><h4 id="paths" tabindex="-1">paths <a class="header-anchor" href="#paths" aria-label="Permalink to &quot;paths&quot;">​</a></h4><p>设置模块名和模块路径的映射，也就是 TypeScript 如何导入 <code>require</code> 或 imports 语句加载的模块。 <code>paths</code> 是基于 <code>baseUrl</code> 加载的，所以必须设置 <code>baseUrl</code>。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">baseUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">jquery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./vendor/jquery/dist/jquery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">app/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/app/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="resolvejsonmodule" tabindex="-1">resolveJsonModule <a class="header-anchor" href="#resolvejsonmodule" aria-label="Permalink to &quot;resolveJsonModule&quot;">​</a></h4><p>开启该设置允许导入带有 <code>.json</code> 扩展名的模块，这是节点项目中的常见做法。 TypeScript 默认不支持解析 JSON 文件</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">resolveJsonModule</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 开启 resolveJsonModule 的情况下正确</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> settings </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./settins.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="resolvepackagejsonexports-resolvepackagejsonimports" tabindex="-1">resolvePackageJsonExports &amp; resolvePackageJsonImports <a class="header-anchor" href="#resolvepackagejsonexports-resolvepackagejsonimports" aria-label="Permalink to &quot;resolvePackageJsonExports &amp; resolvePackageJsonImports&quot;">​</a></h4><p>启用该配置后，import 来自 node*modules 中的模块时，TypeScript 会去解析模块对应的 package.json 中的 exports 和 imports 字段。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>_moduleResolution* 选项设置为 <code>node16</code>、<code>nodenext</code> 和 <code>bundler</code> 时，上述两个配置默认是开启的。</p></div><h4 id="rootdir" tabindex="-1">rootDir <a class="header-anchor" href="#rootdir" aria-label="Permalink to &quot;rootDir&quot;">​</a></h4><p>设置源码根目录，只要和编译后的脚本结构有关。<code>rootDir</code> 对应目录下的所有脚本，会成为输出目录里面的顶层脚本。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">MyProj</span></span>
<span class="line"><span style="color:#A6ACCD;">├── tsconfig.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── core</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── a.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── b.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── sub</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── c.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├── types.d.ts</span></span></code></pre></div><p>rootDir 的推断值是所有非声明输入文件的最长公共路径，上面示例是 <code>core/</code>。 如果设置的 outDir 是 dist，那么结构如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">MyProj</span></span>
<span class="line"><span style="color:#A6ACCD;">├── dist</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── a.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── b.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── sub</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── c.js</span></span></code></pre></div><p>假如希望 core 成为输出目录结构的一部分。通过在 <code>tsconfig.json</code> 中设置 <code>rootDir: &quot;.&quot;</code>，TypeScript 将结构改为如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">MyProj</span></span>
<span class="line"><span style="color:#A6ACCD;">├── dist</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── core</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── a.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── b.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── sub</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── c.js</span></span></code></pre></div><h4 id="rootdirs" tabindex="-1">rootDirs <a class="header-anchor" href="#rootdirs" aria-label="Permalink to &quot;rootDirs&quot;">​</a></h4><p>把多个不同目录，合并成一个虚拟目录，便于模块定位</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">rootDirs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>示例中，rootDirs 将 <code>bar</code> 和 <code>foo</code> 组成一个虚拟目录</p><h4 id="typeroots" tabindex="-1">typeRoots <a class="header-anchor" href="#typeroots" aria-label="Permalink to &quot;typeRoots&quot;">​</a></h4><p>该配置设置类型模块所在的目录，默认情况下是 <code>node_modules/@types</code>，该目录下的模块会自动加入编译。而设置了 <code>typeRoots</code>，那么编译的就是该配置下指定的就是该文件夹下的模块。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">typeRoots</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./typings</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./vendor/types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 数组中每个成员就是一个目录，它们的路径是相对于 tsconfig.json 位置</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="types" tabindex="-1">types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;types&quot;">​</a></h4><p>该配置设置类型模块是哪些，默认情况下是 <code>node_modules/@types</code> 下的所有模块。而设置了 <code>types</code>，那么就是指定了具体模块，比如：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>仅会编译 <code>node_modules/@types</code> 下的 <code>node</code>、<code>jest</code> 和 <code>express</code> 模块，<code>node_modules/@types/*</code> 下的其他软件包将不包括在内。</p><h3 id="emit" tabindex="-1">Emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;Emit&quot;">​</a></h3><h4 id="declaration" tabindex="-1">declaration <a class="header-anchor" href="#declaration" aria-label="Permalink to &quot;declaration&quot;">​</a></h4><p>设置编译时是否为每个脚本生成类型声明文件 <code>.d.ts</code>。</p><h4 id="declarationdir" tabindex="-1">declarationDir <a class="header-anchor" href="#declarationdir" aria-label="Permalink to &quot;declarationDir&quot;">​</a></h4><p>设置生成的 <code>.d.ts</code> 文件所在的目录。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">declaration</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">declarationDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./types</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="declarationmap" tabindex="-1">declarationMap <a class="header-anchor" href="#declarationmap" aria-label="Permalink to &quot;declarationMap&quot;">​</a></h4><p>设置生成的 <code>.d.ts</code> 类型声明文件的同时，还会生成对应的 Source Map 文件。</p><h4 id="downleveliteration" tabindex="-1">downlevelIteration <a class="header-anchor" href="#downleveliteration" aria-label="Permalink to &quot;downlevelIteration&quot;">​</a></h4><p>开启该设置即可在 低版本 es6 以下使用 <code>for / of</code>、<code>数组扩展([...a])</code>、<code>参数扩展(...args)</code> 和 <code>Symbol.iterator</code>。</p><h4 id="emitbom" tabindex="-1">emitBOM <a class="header-anchor" href="#emitbom" aria-label="Permalink to &quot;emitBOM&quot;">​</a></h4><p>设置是否在编译结果的文件头添加字节顺序标志 BOM，默认值是 <code>false</code></p><h4 id="emitdeclarationonly" tabindex="-1">emitDeclarationOnly <a class="header-anchor" href="#emitdeclarationonly" aria-label="Permalink to &quot;emitDeclarationOnly&quot;">​</a></h4><p>设置编译后只生成 <code>.d.ts</code> 文件，不生成 <code>.js</code> 文件。</p><h4 id="importhelpers" tabindex="-1">importHelpers <a class="header-anchor" href="#importhelpers" aria-label="Permalink to &quot;importHelpers&quot;">​</a></h4><p>该设置主要是 TypeScript 处理降级操作。如 TypeScript 使用一些辅助代码来执行扩展类、扩展数组或对象以及异步操作等操作。默认情况下，这些助手被插入到使用它们的文件中。如果在许多不同的模块中使用相同的帮助程序，可能会导致代码重复。 而如果 <code>importHelpers</code> 开启，这些辅助函数将从 <code>tslib</code> 模块导入。 当 <code>target</code> 设置的较低时，如 <code>ES5</code>，而代码中使用了较新的语法，可以开启 importHelpers 来编译降级，但是需要导入 <code>tslib</code>。</p><h4 id="importsnotusedasvalues" tabindex="-1">importsNotUsedAsValues <a class="header-anchor" href="#importsnotusedasvalues" aria-label="Permalink to &quot;importsNotUsedAsValues&quot;">​</a></h4><p>已弃用，使用 <code>verbatimModuleSyntax</code> 替代。 <code>importsNotUsedAsValues</code> 有 3 种值：</p><ul><li><code>remove</code>：删除仅引用类型的 import 语句的默认行为。</li><li><code>preserve</code>：保留从未使用过值或类型的所有 import 语句。这可能会导致导入/副作用被保留。</li><li><code>error</code>：保留所有导入（与保留选项相同），但当值导入仅用作类型时会出错。如果想确保没有值被意外导入，但仍然使副作用导入显式化，这可能很有用。</li></ul><h4 id="inlinesourcemap" tabindex="-1">inlineSourceMap <a class="header-anchor" href="#inlinesourcemap" aria-label="Permalink to &quot;inlineSourceMap&quot;">​</a></h4><p>设置后，TypeScript 将把源码映射内容嵌入到 <code>.js</code> 文件中，而不是编写 <code>.js.map</code> 文件。虽然会导致 JS 文件变大。但是某些场景下可能很方便。比如，想在不允许提供 <code>.map</code> 文件的 Web 服务器上调试 JS 文件。<em>与 sourceMap 互斥</em></p><h4 id="inlinesources" tabindex="-1">inlineSources <a class="header-anchor" href="#inlinesources" aria-label="Permalink to &quot;inlineSources&quot;">​</a></h4><p>设置后，TypeScript 会将 .ts 文件的原始内容作为嵌入字符串包含到源映射中（使用源映射的 sourcesContent 属性）。</p><h4 id="maproot" tabindex="-1">mapRoot <a class="header-anchor" href="#maproot" aria-label="Permalink to &quot;mapRoot&quot;">​</a></h4><p>指定 <code>SourceMap</code> 文件的位置，而不是默认的生成位置。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sourceMap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">mapRoot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://my-website.com/debug/sourcemaps/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="newline" tabindex="-1">newLine <a class="header-anchor" href="#newline" aria-label="Permalink to &quot;newLine&quot;">​</a></h4><p>设置换行符为 <code>CRLF</code> （Windows）还是 <code>LF</code> （Linux）</p><h4 id="noemit" tabindex="-1">noEmit <a class="header-anchor" href="#noemit" aria-label="Permalink to &quot;noEmit&quot;">​</a></h4><p>设置是否产生编译结果。如果不生成，TypeScript 编译就纯粹作为类型检查了。</p><h4 id="noemithelpers" tabindex="-1">noEmitHelpers <a class="header-anchor" href="#noemithelpers" aria-label="Permalink to &quot;noEmitHelpers&quot;">​</a></h4><p>设置在编译结果文件不插入 TypeScript 辅助函数，而是通过外部引入辅助函数来解决，比如 <code>tslib</code>。</p><h4 id="noemitonerror" tabindex="-1">noEmitOnError <a class="header-anchor" href="#noemitonerror" aria-label="Permalink to &quot;noEmitOnError&quot;">​</a></h4><p>指定一旦编译报错，就不生成编译产物。</p><h4 id="outdir" tabindex="-1">outDir <a class="header-anchor" href="#outdir" aria-label="Permalink to &quot;outDir&quot;">​</a></h4><p>指定输出目录。若不指定，编译出来的 <code>.js</code> 文件存放在对应的 <code>.ts</code> 文件的相同位置。</p><h4 id="outfile" tabindex="-1">outFile <a class="header-anchor" href="#outfile" aria-label="Permalink to &quot;outFile&quot;">​</a></h4><p>设置将所有非模块的全局文件，编译在同一个文件里面。只有在 <code>module</code> 属性为 <code>None</code>、<code>System</code>、<code>AMD</code> 时才生效，并且不能用来打包 <code>CommonJS</code> 或 <code>ES6</code> 模块。</p><h4 id="preserveconstenums" tabindex="-1">preserveConstEnums <a class="header-anchor" href="#preserveconstenums" aria-label="Permalink to &quot;preserveConstEnums&quot;">​</a></h4><p>将 <code>const enum</code> 结构保留下来，不替换成常量值。</p><h4 id="preservevalueimports" tabindex="-1">preserveValueImports <a class="header-anchor" href="#preservevalueimports" aria-label="Permalink to &quot;preserveValueImports&quot;">​</a></h4><p>已弃用，使用 <code>verbatimModuleSyntax</code> 替代。 某些场景下，TypeScript 不能检测到使用了 <code>import</code> 语法。如下，TypeScript 会判断这个 <code>import</code> 没用而去掉它，因为在 <code>eval</code> 中使用，TypeScript 没有办法判断是否使用了。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Animal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./animal.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">eval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">console.log(new Animal().isDangerous)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">someFunc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./some-module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">someFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Click</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="removecomments" tabindex="-1">removeComments <a class="header-anchor" href="#removecomments" aria-label="Permalink to &quot;removeComments&quot;">​</a></h4><p>编译成 JavaScript 时是否删除所有注释。</p><h4 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;sourceMap&quot;">​</a></h4><p>设置编译时是否生成 <code>SourceMap</code> 文件。</p><h4 id="sourceroot" tabindex="-1">sourceRoot <a class="header-anchor" href="#sourceroot" aria-label="Permalink to &quot;sourceRoot&quot;">​</a></h4><p>在 <code>SourceMap</code> 里面设置 TypeScript 源文件的位置。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sourceMap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sourceRoot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://my-website.com/debug/source/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="stripinternal" tabindex="-1">stripInternal <a class="header-anchor" href="#stripinternal" aria-label="Permalink to &quot;stripInternal&quot;">​</a></h4><p>当开启该设置时，将停止为具有 <code>@internal</code> JSDoc 注释的代码生成声明。</p><h3 id="javascript-support" tabindex="-1">JavaScript Support <a class="header-anchor" href="#javascript-support" aria-label="Permalink to &quot;JavaScript Support&quot;">​</a></h3><h4 id="allowjs" tabindex="-1">allowJs <a class="header-anchor" href="#allowjs" aria-label="Permalink to &quot;allowJs&quot;">​</a></h4><p><code>allowJs</code> 允许 TypeScript 项目加载 JS 脚本。编译时，也会将 JS 文件，一起构建到输出目录中</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">allowJs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="checkjs" tabindex="-1">checkJs <a class="header-anchor" href="#checkjs" aria-label="Permalink to &quot;checkJs&quot;">​</a></h4><p><code>checkJS</code> 设置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开 <code>allowJs</code>。它等同于在 JS 脚本的头部添加 <code>// @ts-check</code> 命令</p><h4 id="maxnodemodulejsdepth" tabindex="-1">maxNodeModuleJsDepth <a class="header-anchor" href="#maxnodemodulejsdepth" aria-label="Permalink to &quot;maxNodeModuleJsDepth&quot;">​</a></h4><p>在 <code>node_modules</code> 下搜索并加载 JavaScript 文件的最大依赖深度。仅当启用 <code>allowJs</code> 时才能使用此标志，如果您想让 <code>TypeScript</code> 为 <code>node_modules</code> 内的所有 JavaScript 推断类型，则可以使用此标志。默认值为 0</p><h3 id="editor-support" tabindex="-1">Editor Support <a class="header-anchor" href="#editor-support" aria-label="Permalink to &quot;Editor Support&quot;">​</a></h3><h4 id="disablesizelimit" tabindex="-1">disableSizeLimit <a class="header-anchor" href="#disablesizelimit" aria-label="Permalink to &quot;disableSizeLimit&quot;">​</a></h4><p>为了避免在处理非常大的 JavaScript 项目时可能出现的内存膨胀问题，TypeScript 将分配的内存量有一个上限。打开此标志将取消限制。</p><h4 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h4><p>编辑器内运行的语言服务插件列表</p><h3 id="interop-constraints" tabindex="-1">Interop Constraints <a class="header-anchor" href="#interop-constraints" aria-label="Permalink to &quot;Interop Constraints&quot;">​</a></h3><h4 id="allowsyntheticdefaultimports" tabindex="-1">allowSyntheticDefaultImports <a class="header-anchor" href="#allowsyntheticdefaultimports" aria-label="Permalink to &quot;allowSyntheticDefaultImports&quot;">​</a></h4><p>允许 import 命令默认加载没有 <code>default</code> 输出的模块。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 默认情况</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开启配置后</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="esmoduleinterop" tabindex="-1">esModuleInterop <a class="header-anchor" href="#esmoduleinterop" aria-label="Permalink to &quot;esModuleInterop&quot;">​</a></h4><p>该配置修复了一些 CommonJS 和 ES6 模块之间的兼容性问题。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> moment </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">moment</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">moment</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面示例中，根据 <code>ES6</code> 的规范，<code>import * as moment</code> 里面的 <code>moment</code> 是一个对象，不能当做函数调用。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> moment </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">moment</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">moment</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>改成这种就不会报错了。如果将上面的代码编译成 CommonJS 模块格式，打开 <code>esModuleInterop</code> 就会加入一些辅助函数，确保编译后的代码行为正确。</p><p>打开 <code>esModuleInterop</code>，将自动打开 <code>allowSyntheticDefaultImports</code></p><h4 id="forceconsistentcasinginfilenames" tabindex="-1">forceConsistentCasingInFileNames <a class="header-anchor" href="#forceconsistentcasinginfilenames" aria-label="Permalink to &quot;forceConsistentCasingInFileNames&quot;">​</a></h4><p>设置文件名是否大小写敏感，默认是开启的。</p><h4 id="isolatedmodules" tabindex="-1">isolatedModules <a class="header-anchor" href="#isolatedmodules" aria-label="Permalink to &quot;isolatedModules&quot;">​</a></h4><p>设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本。</p><h4 id="preservesymlinks" tabindex="-1">preserveSymlinks <a class="header-anchor" href="#preservesymlinks" aria-label="Permalink to &quot;preserveSymlinks&quot;">​</a></h4><p>这个开关使用于 Node.js，当这个选项开启时，在进行模块和 package 解析时（例如使用 import 或者三斜杠语法）引用都是相对于符号链接文件的位置来解析的，而不是相对于符号链接所解析的路径。</p>`,230),e=[p];function t(c,r,i,D,y,F){return a(),n("div",null,e)}const A=s(l,[["render",t]]);export{C as __pageData,A as default};
